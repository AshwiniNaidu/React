
VIRTUAL DOM
JSX
******************************************************

JS Frameworks/Libraries
-> SPA
-> Component based UI development
*****************************************************

NPM:
-> To create package.json in a project => npm init /npm init -y
-> Save runtime packages/dependencies (added in package.json dependencies section) - "-S" (Ex. npm install -S abc)
-> Save development packages/dependencies (added in package.json devDependencies section) - "-D" (Ex. npm install -D abc)
-> NPM as a task runner - Built In and Custom tasks
    Custom tasks added in scripts section of package.json can be executed in the 
command prompt using "run" - Ex. npm run lite

*************************************************************
Lite-Server:
-> Development node server that serves a webapp. It is a wrapper for BrowserSync. 
    Installation: npm install lite-server -D (added as devDependency in package.json)
    Usage:
    1. Type from project root in command prompt --> node_modules\.bin\lite-server 
    2. Add "lite": "lite-server" to scripts section in package.json and run 
        "npm run lite" from project root in command prompt


*************************************************************

CommonJS, AMD, UMD, RequireJS 
-> Standards used to define dependencies and export values (Multiple JS files)
-> CommonJS uses "require()" function to define dependencies in other js files (main file)


**************************************************************
Webpack
-> Module bundler 
->Installation - npm install -g Webpack
-> Usage: from the js folder in cmd - run "webpack srcjs newbundledjs"
    
**************************************************************
REACT JS
-> API - React (Presentation/Process Logic)
    - React-DOM (DOM Manipulation)
-> REACT Setup
     - Manual setup
     - CLI Tool (create-react-app) (Uses babel and webpack internally)
            1. Run the below command to setup react globally
                "npm install -g create-react-app"
            2. Check the setup
                "create-react-app --version" (confirm Installation)
            3. create new project
                "create-react-app projname" (no Capital Letters allowed)
    - New project has folder "public" - index.html, "src" - js/css files and node modules
    - Startup JS file - src/index.js
    - custom deveoper tool for debugging - extension "React" in Chrome/Firefox
-> Virtual DOM
-> JSX 
    - Used to create DOM elements/ execute expressions. It's a syntax extension to JavaScript (HTML + XML).Template Language. Internally uses Babel to
    compile the syntax down to "React.createElement" 
     Ex. ReactDOM.render(<p>Hello!</p>, root); //Hello! 
     Ex. ReactDOM.render(<p>Hello! { 10+ 5} </p>, root); // Hello! 15
    - Multi-line html must be enclosed in parent element.
    Ex. ReactDOM.render(
    <div>
        <h3>Welcome to React</h3>
        <p>First React Example</p>
    </div>, root);
    - custom tags/component names should always start with Capital Letter/Pascal case
    - React Events must always be in CamelCase
    - class attribute in html is className
 -> components 
    - Functional based component 
        Ex. let App = () => {};
    - Class based Component 
        Ex. class App extends React.Component {}
        1.  Can be used in different modules using export/import
        2. Export Types - Default and Named
            a. Default : One per file
                Ex. export default class A extends React.Component {}
                i. While importing default, {} must not be used around the classname.
                    Ex. import A from './test'
                ii. Alias names can be used while importing default elements
            b. Named: Multiple named per file
                i. Same name must be used while importing
                ii. While importing, {} must be used
                    Ex. import {A} from './test'

    - Components accept data through attributes called "props" or "properties"
        - Helps pass data from Parent to Child component
        Ex. In parent component - 
            class SignIn extends Component {
                render() {
                    return (
                      <div>
                        <Sign heading="Sign In" />
                      </div>
                    )
                }
            }
          In Child Component -
            export default class Sign extends Component {
                render() {
                    return <h3>{this.props.heading}</h3>
                }
            }

***********************************************
State in ReactJS
-> State is a JavaScript object which allows to modify the mutable React component data.
-> State is available only for class based component in React
-> "ref" attribute is used to access DOM elements.It can be attached to any hTML element
    to access its value
    Ex. <input type="text" className="form-control" ref="userId" />
->"refs" object can be used to retrieve the values accessed by "ref".
Ex. console.log(this.refs.userId.value);
-> "setState" is used to update the local state of the class.

***************************************************
Passing Data: (Communication)
-> Parent to child is done through "props"
-> Child to Parent is combination of "props" and "state"
    - Send data "props" value from parent to child through function call
    Ex. 
        Parent : <Sign heading="Sign In" onSignInClick={this.handleSignIn} /> 
        child:  console.log(this.props.onSignInClick(this.refs.userId.value));
    - receive data in parent
        Ex. Receive data in Parent:
             handleSignIn = (uname) => {
                console.log("handleSign In " + uname)
             }
    - Update state in Parent:
        Ex:  handleSignIn = (uname) => {
                console.log("handleSign In " + uname);
                this.setState({loggedUserName: uname});
             }

************************************************************************
Routing
-> Manages view changes in react application
-> React-router - base package. The below two packages uses this base
    - react-router-dom -> package used for browser
    - react-router native -> package used for mobile
-> React Router renders components based on request URLs in web browsers
-> Maintains browser history and updates the browser path
-> React-Router-Dom
   1. Installation: "npm i -S react-router-dom"

   2. BrowserRouter: Router Component that uses HTML5 history API(pushstate, replaceState) to keep UI sync 
        with URL.
        Ex. ReactDOM.render(
                <BrowserRouter>
                <App />
                </BrowserRouter>, document.getElementById("root"))

   3. Route: Route component is used to define the route paths and components associated to the particular route 
        Ex. <Route path="/signIn" component={SignIn} />
        
        If there is no component, render function can be used directly to add the content which needs to be
        displayed when user navigates to that particular path
        Ex: <Route exact path="/" render={() => <h2>Home</h2>} />

   4. Link: Link component is used an alternative to anchor tag to map the urls for the links in navigation
      Ex. <Link to="/signin" className="nav-link">Sign In</Link>

-> Handle unmatched routes - Create custom component to display what data need to
    be displayed when user navigates to unmatched route from browser path
    and map the same to route path "*"
        <Route path="*" component={NotFound} />
***********************************************************************
Deploying a React Project 
-> "npm run build" is used to build the code which is ready to be deployed
-> This creates a folder "build" which has "index.html" and sub folder "static" which contains css,js and media
->The contents of "build" can be copied to dist folder/an folder on server to run.

----------------------------------------------------------------------------
->  DOTNET - Hosting Files/Deploying code
 IIS -> inetpub->wwwwroot 

  In local machine , C:\inetpub\wwwroot, create new folder "myapp" and copy the built code and run http://localhost/myapp
 This will run the code from IIS
 
-> JAVA 
 Apache Tomcat -> Webapps

 --------------------------------------------------------------------------
 *******************************************************************************************
 Component LifeCycle
 -> Process that has various stages like creation of component, before rendering of component, while
    rendering a component, after rendering a component and destroying a Component.
-> "Mounting" - terminology used when React inserts a component to DOM
-> "UnMounting" - terminology used when React deletes a component from DOM
->Methods in Component Lifecycle:
    - componentWillMount()
    - render()
    - componentDidMount()
    - componentWillUnmount()
-> Component props will not be available during the initialization (in constructor function).
    It will be available only from componentWillMount() lifecycle method. 
-> Any changes to the component UI styling can be made only from componentDidMount()/after rendering the component
    Ex. componentDidMount() {
        console.log("component did mount");
        document.querySelector("h3").style.color = "#ca9988";
    }

****************************************************************************************